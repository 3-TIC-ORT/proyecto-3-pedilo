datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  surname       String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Orders        Order[]
  Tables        TableUser[]
  AssignedTables Table[]        @relation("WaiterTables")
  Authenticator Authenticator[]
  CallsMade     Call[]          @relation("UserCalls")
  CallsReceived Call[]          @relation("WaiterCalls")
  AssignedCarts Cart[]          @relation("WaiterTables")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Item {
  id          Int           @id @default(autoincrement())
  title       String        @unique
  description String
  ingredients String
  photo       String?
  price       Float
  category    String
  CartItems   CartItem[]
  OrderItems  OrderItem[]
}

// Modified: Cart is now associated with a table instead of users
model Cart {
  id          String      @id @default(cuid())
  tableNumber Int         @unique  // One cart per table
  waiterId    String      // Assigned waiter
  status      String      @default("active")
  CartItems   CartItem[]
  Table       Table       @relation(fields: [tableNumber], references: [tableNumber])
  Waiter      User        @relation("WaiterTables", fields: [waiterId], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// New: CartItem model to store items in the shared cart
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  itemId    Int
  quantity  Int      @default(1)
  addedBy   String?  // Optional: track which user added the item

  Cart      Cart     @relation(fields: [cartId], references: [id])
  Item      Item     @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, itemId])
}

model OrderItem {
  orderId  Int
  itemId   Int
  quantity Int
  status   String @default("Pending")

  Order Order @relation(fields: [orderId], references: [orderId])
  Item  Item  @relation(fields: [itemId], references: [id])

  @@id([orderId, itemId])
}

model Order {
  orderId     Int      @id @default(autoincrement())
  userId      String
  orderDate   DateTime @default(now())
  totalAmount Float
  status      String   @default("Pending")
  tableNumber Int?
  orderNote   String?

  User       User        @relation(fields: [userId], references: [id])
  OrderItems OrderItem[]

  @@map("orders")
}

model Table {
  tableNumber Int         @id @unique @default(autoincrement())
  Users       TableUser[]
  Waiter      User?       @relation("WaiterTables", fields: [waiterId], references: [id])
  waiterId    String?
  Cart        Cart?       // One-to-one relation with Cart
  Calls       Call[]

  @@map("tables")
}

model TableUser {
  id          String   @id @default(cuid())
  userId      String
  tableNumber Int
  User        User     @relation(fields: [userId], references: [id])
  Table       Table    @relation(fields: [tableNumber], references: [tableNumber])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, tableNumber])
}

model Call {
  id          String   @id @default(cuid())
  userId      String
  waiterId    String
  tableNumber Int
  reason      String
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User   User  @relation("UserCalls", fields: [userId], references: [id])
  Waiter User  @relation("WaiterCalls", fields: [waiterId], references: [id])
  Table  Table @relation(fields: [tableNumber], references: [tableNumber])

  @@index([userId])
  @@index([waiterId])
  @@index([tableNumber])
}
