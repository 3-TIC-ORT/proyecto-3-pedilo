datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  surname       String?
  email         String          @unique
  emailVerified DateTime?
  password      String?         // Optional: If storing passwords
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Orders        Order[]
  Chefs         Chef[]
  Waiters       Waiter[]
  Managers      Manager[]
  Tables        Table[]
  Authenticator Authenticator[] // Optional for WebAuthn support

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Additional application-specific models

model Item {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  ingredients String
  photo       String?
  price       Float
  rating      Float
  recommended Boolean
  category    String
  Cart        Cart[]
  OrderItems  OrderItem[]
}

model Cart {
  itemId Int
  userId String
  amount Int @default(1)

  User User @relation(fields: [userId], references: [id])
  Item Item @relation(fields: [itemId], references: [id])

  @@id([itemId, userId])
}

model OrderItem {
  orderId  Int
  itemId   Int
  quantity Int
  status   String @default("Pending")

  Order Order @relation(fields: [orderId], references: [orderId])
  Item  Item  @relation(fields: [itemId], references: [id])

  @@id([orderId, itemId])
}

model Order {
  orderId     Int      @id @default(autoincrement())
  userId      String
  orderDate   DateTime @default(now())
  totalAmount Float
  status      String   @default("Pending")
  tableNumber Int?

  User       User        @relation(fields: [userId], references: [id])
  OrderItems OrderItem[]

  @@map("orders")
}

model Chef {
  id     Int  @id @default(autoincrement())
  userId String
  User   User @relation(fields: [userId], references: [id])
}

model Waiter {
  id     Int     @id @default(autoincrement())
  userId String
  User   User    @relation(fields: [userId], references: [id])
  Table  Table[]
}

model Manager {
  id     Int  @id @default(autoincrement())
  userId String
  User   User @relation(fields: [userId], references: [id])
}

model Table {
  tableNumber Int  @id @unique
  userId      String?
  waiterId    Int?

  User   User?   @relation(fields: [userId], references: [id])
  Waiter Waiter? @relation(fields: [waiterId], references: [id])

  @@map("tables")
}

